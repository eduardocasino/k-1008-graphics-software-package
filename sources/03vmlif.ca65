

;        MTU VISIBLE MEMORY DEMONSTRATION PROGRAM
;        JOSEPH CONWAY'S GAME OF LIFE ON A 320 BY 200 MATRIX

;        ENTRY POINT "DEMO" GENERATES AN INITIAL PATTERN OF CELLS AND
;        THEN EXECUTES THE LIFE ALGORITHM ON IT.

;        FOR USER ENTERED PATTERNS, THE SCREEN SHOULD FIRST BE CLEARED
;        BY EXECUTING "INIT". THE KIM KEYBOARD MONITOR OR "KYPT" MAY
;        THEN BE USED TO ENTER THE INITIAL CELL PATTERN. AFTER PATTERN
;        ENTRY, A JUMP TO "LIFE" WILL START COMPUTING THE SUCCEEDING
;        GENERATIONS.

;        LIFE MAY BE INTERRUPTED AT THE END OF A GENERATION BY PRESSING
;        ANY KEY (EXCEPT RESET OR ST) ON THE KIM KEYPAD AND HOLDING
;        UNTIL THE END OF THE GENERATION. THIS WILL TRANSFER CONTROL
;        TO "KYPT" FOR USER MODIFICATION OF THE DISPLAYED PATTERN.

;        KYPT IS USED FOR CONVENIENT ENTRY AND MODIFICATION OF CELL
;        PATTERNS. WHEN ENTERED, A BLINKING GRAPHIC CURSOR IS
;        DISPLAYED IN THE MIDDLE OF THE SCREEN. THE USER MAY MOVE THE
;        CURSOR IN ANY DIRECTION AND EITHER SET OR CLEAR CELLS AT THE
;        CURRENT CURSOR POSITION. THE CURSOR IS MOSTLY ON IF IT COVERS
;        A LIVE CELL AND MOSTLY OFF OTHERWISE.
;            THE KIM KEYBOARD IS USED FOR CONTROL OF THE PROGRAM. THE
;        FOLLOWING KEYS ARE ACTIVE:
;               1  CURSOR DOWN
;               6  CURSOR RIGHT
;               9  CURSOR UP
;               4  CURSOR LEFT
;               +  SET A CELL
;               F  CLEAR A CELL
;               GO GO TO LIFE ROUTINE USING THE CURRENT PATTERN
;        PARTICULARLY INTERESTING INITIAL PATTERNS MAY BE SAVED ON KIM
;        CASSETTE AND RELOADED LATER FOR DEMONSTRATIONS, ETC.

;        GENERAL EQUATES

KIMMON  =       $1C22      ; ENTRY TO KIM MONITOR
GETKEY  =       $1F6A      ; ADDRESS OF MONITOR KEYBOARD READ ROUTINE
NX      =       320         ; NUMBER OF BITS IN A ROW
NY      =       200         ; NUMBER OF ROWS  (CHANGE FOR HALF SCREEN
                            ; OPERATION)
NPIX    =       NX*NY       ; NUMBER OF PIXELS
DBCDLA  =       50          ; KIM KEYBOARD DEBOUNCE DELAY TIME
CSRDEL  =       $00E8
KYPT0   =       $03D8
X1CORD  =       $000A
Y1CORD  =       $000C
LIFE    =       $0100
REALST  =       $0003
CSRINS  =       $00E2

         .ORG   $1780        ; CONTINUE PROGRAM IN 6530 RAM

KYPT6:   CMP    #1           ; TEST "1" KEY
         BEQ    CSRD         ; JUMP IF CURSOR DOWN
         CMP    #9           ; TEST "9" KEY
         BEQ    CSRU         ; JUMP IF CURSOR UP
         CMP    #4           ; TEST "4" KEY
         BEQ    CSRL         ; JUMP IF CURSOR LEFT
         CMP    #6           ; TEST "6" KEY
         BEQ    CSRR         ; JUMP IF CURSOR RIGHT
         CMP    #19          ; TEST "GO" KEY
         BEQ    GO           ; JUMP IF GO KEY
         CMP    #18          ; TEST "+" KEY
         BEQ    SETCEL       ; JUMP IF SET CELL KEY
         CMP    #15          ; TEST "F" KEY
         BEQ    CLRCEL       ; JUMP IF CLEAR CELL KEY
         JMP    KYPT0        ; IGNORE ANY OTHER KEYS

CSRD:    JSR    CSRDEL       ; DELETE EXISTING CURSOR
         DEC    Y1CORD       ; DECREMENT Y COORDINATE FOR CURSOR DOWN
         JMP    CSRMOV

CSRU:    JSR    CSRDEL       ; DELETE EXISTING CURSOR
         INC    Y1CORD       ; INCREMENT Y COORDINATE FOR CURSOR UP
         JMP    CSRMOV

CSRL:    JSR    CSRDEL       ; DELETE EXISTING CURSOR
         LDA    X1CORD       ; DECREMENT X COORDINATE FOR CURSOR LEFT
         BNE    CSRL1
         DEC    X1CORD+1
CSRL1:   DEC    X1CORD
         JMP    CSRMOV

CSRR:    JSR    CSRDEL       ; DELETE EXISTING CURSOR
         INC    X1CORD       ; INCREMENT X COORDINATE FOR CURSOR RIGHT
         BNE    CSRMOV
         INC    X1CORD+1

CSRMOV:  JSR    CSRINS       ; INSERT CURSOR AT NEW LOCATION
         JMP    KYPT0        ; GO BACK TO KEYBOARD INPUT LOOP

SETCEL:  LDA    #$FF         ; SET REAL CELL STATE TO LIVE
         BNE    CLRCL1

CLRCEL:  LDA    #0           ; SET REAL CELL STATE TO DEAD
CLRCL1:  STA    REALST
         JMP    KYPT0        ; GO BACK TO KEYBOARD INPUT LOOP

GO:      JSR    CSRDEL       ; DELETE CURSOR AND RESTORE THE CELL UNDER
                             ; THE CURSOR
         JMP    LIFE         ; AND GO EXECUTE LIFE


         .END

